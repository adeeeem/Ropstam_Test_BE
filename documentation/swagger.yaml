openapi: 3.0.0
info:
  title: Musharakah - OpenAPI 3.0
  description: "<h2>Welcome to the API Documentation of Musharakah. </h2><br> Majority of the routes need JWT, make sure you have proper authentification before using a route. Set them by clicking the AUTHORIZE button given below. Expiry time for JWT is 100 minutes. It can't be changed in .env file."

  version: 1.0.0
servers:
  - url: http://localhost:3005
    description: Locally deployed server

tags:
  - name: Common routes
  - name: Pool
  - name: Admin

paths:
  #common routes
  /register:
    post:
      tags:
        - Common routes
      summary: Request to register for user/notary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: Touseef Ali
                phoneNumber:
                  type: string
                  example: 03124567890
                emailAddress:
                  type: string
                  example: abc@gmail.com
                password:
                  type: string
                  example: abc123
                username:
                  type: string
                  example: touseef123
                walletAddress:
                  type: string
                  example: 0xEf64B272ABA25F35cDA7E124559160B33e25Bd34
                role:
                  type: string
                  enum:
                    - user
                    - notary

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "user":
                      {
                        "_id": "6467baf5ded10e62ca1493b3",
                        "firstName": "Touseef",
                        "lastName": "Ali",
                        "phoneNumber": "03034615565",
                        "emailAddress": "abc@gmail.com",
                        "walletAddress": "0x1234561234567",
                        "role": "user",
                        "createdAt": "2023-05-19T18:07:49.504Z",
                        "updatedAt": "2023-05-19T18:07:49.504Z",
                        "__v": 0,
                      },
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjY0NjdiYWY1ZGVkMTBlNjJjYTE0OTNiMyIsImZpcnN0TmFtZSI6IlRvdXNlZWYiLCJsYXN0TmFtZSI6IkFsaSIsInBob25lTnVtYmVyIjoiMDMwMzQ2MTU1NjUiLCJlbWFpbEFkZHJlc3MiOiJ0b3VzZWVmX2FkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiJDJiJDEwJEdFSk95U3JPYy9uQXZoU3JQUmVuL2U1V1k5ZzJNUUhSV0trN2lXaFN4aEd4QWZZa3JuOFhDIiwid2FsbGV0QWRkcmVzcyI6IjB4MTIzNDU2MTIzNDU2NyIsInJvbGUiOiJhZG1pbiIsImNyZWF0ZWRBdCI6IjIwMjMtMDUtMTlUMTg6MDc6NDkuNTA0WiIsInVwZGF0ZWRBdCI6IjIwMjMtMDUtMTlUMTg6MDc6NDkuNTA0WiIsIl9fdiI6MH0sImlhdCI6MTY4NzA5NjIwM30.9x8NM89k9_Dz5fGOXOKM1bzeG2DDUEw2JC-h-unXQ7M",
                  }
        400:
          $ref: "#/components/responses/standard400"
        500:
          $ref: "#/components/responses/standard500"

  /login:
    post:
      tags:
        - Common routes
      summary: Request to login for user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailAddress:
                  type: string
                  example: abc@gmail.com
                password:
                  type: string
                  example: abc123

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "user":
                      {
                        "_id": "6467baf5ded10e62ca1493b3",
                        "firstName": "Touseef",
                        "lastName": "Ali",
                        "phoneNumber": "03034615565",
                        "emailAddress": "abc@gmail.com",
                        "walletAddress": "0x1234561234567",
                        "role": "user",
                        "createdAt": "2023-05-19T18:07:49.504Z",
                        "updatedAt": "2023-05-19T18:07:49.504Z",
                        "__v": 0,
                      },
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjY0NjdiYWY1ZGVkMTBlNjJjYTE0OTNiMyIsImZpcnN0TmFtZSI6IlRvdXNlZWYiLCJsYXN0TmFtZSI6IkFsaSIsInBob25lTnVtYmVyIjoiMDMwMzQ2MTU1NjUiLCJlbWFpbEFkZHJlc3MiOiJ0b3VzZWVmX2FkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiJDJiJDEwJEdFSk95U3JPYy9uQXZoU3JQUmVuL2U1V1k5ZzJNUUhSV0trN2lXaFN4aEd4QWZZa3JuOFhDIiwid2FsbGV0QWRkcmVzcyI6IjB4MTIzNDU2MTIzNDU2NyIsInJvbGUiOiJhZG1pbiIsImNyZWF0ZWRBdCI6IjIwMjMtMDUtMTlUMTg6MDc6NDkuNTA0WiIsInVwZGF0ZWRBdCI6IjIwMjMtMDUtMTlUMTg6MDc6NDkuNTA0WiIsIl9fdiI6MH0sImlhdCI6MTY4NzA5NjIwM30.9x8NM89k9_Dz5fGOXOKM1bzeG2DDUEw2JC-h-unXQ7M",
                  }
        400:
          $ref: "#/components/responses/standard400"
        500:
          $ref: "#/components/responses/standard500"

  /admin-login:
    post:
      tags:
        - Common routes
      summary: Request to login for admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailAddress:
                  type: string
                  example: admin@gmail.com
                password:
                  type: string
                  example: admin123

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "user":
                      {
                        "_id": "6467baf5ded10e62ca1493b3",
                        "firstName": "Touseef",
                        "lastName": "Ali",
                        "phoneNumber": "03034615565",
                        "emailAddress": "abc@gmail.com",
                        "walletAddress": "0x1234561234567",
                        "role": "admin",
                        "createdAt": "2023-05-19T18:07:49.504Z",
                        "updatedAt": "2023-05-19T18:07:49.504Z",
                        "__v": 0,
                      },
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjY0NjdiYWY1ZGVkMTBlNjJjYTE0OTNiMyIsImZpcnN0TmFtZSI6IlRvdXNlZWYiLCJsYXN0TmFtZSI6IkFsaSIsInBob25lTnVtYmVyIjoiMDMwMzQ2MTU1NjUiLCJlbWFpbEFkZHJlc3MiOiJ0b3VzZWVmX2FkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiJDJiJDEwJEdFSk95U3JPYy9uQXZoU3JQUmVuL2U1V1k5ZzJNUUhSV0trN2lXaFN4aEd4QWZZa3JuOFhDIiwid2FsbGV0QWRkcmVzcyI6IjB4MTIzNDU2MTIzNDU2NyIsInJvbGUiOiJhZG1pbiIsImNyZWF0ZWRBdCI6IjIwMjMtMDUtMTlUMTg6MDc6NDkuNTA0WiIsInVwZGF0ZWRBdCI6IjIwMjMtMDUtMTlUMTg6MDc6NDkuNTA0WiIsIl9fdiI6MH0sImlhdCI6MTY4NzA5NjIwM30.9x8NM89k9_Dz5fGOXOKM1bzeG2DDUEw2JC-h-unXQ7M",
                  }
        400:
          $ref: "#/components/responses/standard400"
        500:
          $ref: "#/components/responses/standard500"

  /notary-login:
    post:
      tags:
        - Common routes
      summary: Request to login for notary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailAddress:
                  type: string
                  example: notary@gmail.com
                password:
                  type: string
                  example: notary123

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "user":
                      {
                        "_id": "6467baf5ded10e62ca1493b3",
                        "firstName": "Touseef",
                        "lastName": "Ali",
                        "phoneNumber": "03034615565",
                        "emailAddress": "abc@gmail.com",
                        "walletAddress": "0x1234561234567",
                        "role": "notary",
                        "createdAt": "2023-05-19T18:07:49.504Z",
                        "updatedAt": "2023-05-19T18:07:49.504Z",
                        "__v": 0,
                      },
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjY0NjdiYWY1ZGVkMTBlNjJjYTE0OTNiMyIsImZpcnN0TmFtZSI6IlRvdXNlZWYiLCJsYXN0TmFtZSI6IkFsaSIsInBob25lTnVtYmVyIjoiMDMwMzQ2MTU1NjUiLCJlbWFpbEFkZHJlc3MiOiJ0b3VzZWVmX2FkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiJDJiJDEwJEdFSk95U3JPYy9uQXZoU3JQUmVuL2U1V1k5ZzJNUUhSV0trN2lXaFN4aEd4QWZZa3JuOFhDIiwid2FsbGV0QWRkcmVzcyI6IjB4MTIzNDU2MTIzNDU2NyIsInJvbGUiOiJhZG1pbiIsImNyZWF0ZWRBdCI6IjIwMjMtMDUtMTlUMTg6MDc6NDkuNTA0WiIsInVwZGF0ZWRBdCI6IjIwMjMtMDUtMTlUMTg6MDc6NDkuNTA0WiIsIl9fdiI6MH0sImlhdCI6MTY4NzA5NjIwM30.9x8NM89k9_Dz5fGOXOKM1bzeG2DDUEw2JC-h-unXQ7M",
                  }
        400:
          $ref: "#/components/responses/standard400"
        500:
          $ref: "#/components/responses/standard500"

  #Pool routes
  /pool/request:
    post:
      tags:
        - Pool
      summary: Request to varify and initiates pool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                businessName:
                  type: string
                  example: supply and chain
                requiredAmount:
                  type: number
                  example: 1000
                pdfLink:
                  type: string
                  example: https://ipfs.io/ipfs/QmS8FdrxYsQ7fTDg4fmiFbTfLixb6rjACdSgxSptVDRCRs
      security:
        - userBearerAuth: []

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "success": true,
                    "message": "Pool has been created successfully",
                  }
        400:
          $ref: "#/components/responses/standard400"
        500:
          $ref: "#/components/responses/standard500"

  /pool/verify:
    put:
      tags:
        - Pool
      summary: Request to verify pool documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                poolId:
                  type: string
                  example: 648e1275d31b63ce8dd99671
      security:
        - notaryBearerAuth: []

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "success": true,
                    "message": "Pool has been verified successfully!",
                  }
        400:
          $ref: "#/components/responses/standard400"
        500:
          $ref: "#/components/responses/standard500"

  /pool/:
    get:
      tags:
        - Pool
      summary: Returns all pool available

      security:
        - notaryBearerAuth: []

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "success": true,
                    "totalPools":
                      [
                        {
                          "notaryId": null,
                          "_id": "648e1275d31b63ce8dd99671",
                          "name": "supply and chain",
                          "maturityDate": null,
                          "businessOwner": "6467baf5ded10e62ca1493b3",
                          "investors": [],
                          "noOfInvestors": 0,
                          "requireAmount": 100,
                          "pdfLink": "www.pdf.com",
                          "isVerified": true,
                          "__v": 0,
                        },
                      ],
                  }
        404:
          $ref: "#/components/responses/standard404"
        500:
          $ref: "#/components/responses/standard500"

  /pool/verified:
    get:
      tags:
        - Pool
      summary: Returns all verified pool available

      security:
        - notaryBearerAuth: []

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "success": true,
                    "verifiedPools":
                      [
                        {
                          "_id": "64952d52384880a44fea10d4",
                          "name": "Testing",
                          "notaryId":
                            {
                              "_id": "6467d59e0bcffa7f9f2c5160",
                              "fullName": "Touseef",
                            },
                          "maturityDate": null,
                          "businessOwner":
                            {
                              "_id": "646785e827f6337d23006bf7",
                              "fullName": "Touseef Ali",
                            },
                          "investors": [],
                          "noOfInvestors": 0,
                          "requireAmount": 1000,
                          "pdfLink": "https://ipfs.io/ipfs/QmZ8kQcsXjyUzwp3Ce24uQnmHJuHRTFkez6YffxhV4F8Lw",
                          "isVerified": true,
                          "isInitialized": false,
                          "__v": 0,
                          "adminId": "6467baf5ded10e62ca1493b3",
                        },
                      ],
                  }
        404:
          $ref: "#/components/responses/standard404"
        500:
          $ref: "#/components/responses/standard500"

  /pool/unverified:
    get:
      tags:
        - Pool
      summary: Returns all unverified pool available

      security:
        - notaryBearerAuth: []

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "success": true,
                    "unverifiedPools":
                      [
                        {
                          "_id": "64952d52384880a44fea10d4",
                          "name": "Testing",
                          "notaryId": "6467d59e0bcffa7f9f2c5160",
                          "maturityDate": null,
                          "businessOwner":
                            {
                              "_id": "646785e827f6337d23006bf7",
                              "fullName": "Touseef Ali",
                            },
                          "investors": [],
                          "noOfInvestors": 0,
                          "requireAmount": 1000,
                          "pdfLink": "https://ipfs.io/ipfs/QmZ8kQcsXjyUzwp3Ce24uQnmHJuHRTFkez6YffxhV4F8Lw",
                          "isVerified": false,
                          "isInitialized": true,
                          "__v": 0,
                          "adminId": "6467baf5ded10e62ca1493b3",
                        },
                      ],
                  }
        404:
          $ref: "#/components/responses/standard404"
        500:
          $ref: "#/components/responses/standard500"

  /pool/active:
    get:
      tags:
        - Pool
      summary: Returns all active pool available

      security:
        - notaryBearerAuth: []

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "success": true,
                    "activePools":
                      [
                        {
                          "_id": "64952d52384880a44fea10d4",
                          "name": "Testing",
                          "notaryId": "6467d59e0bcffa7f9f2c5160",
                          "maturityDate": null,
                          "businessOwner": "646785e827f6337d23006bf7",
                          "investors": [],
                          "noOfInvestors": 0,
                          "requireAmount": 1000,
                          "pdfLink": "https://ipfs.io/ipfs/QmZ8kQcsXjyUzwp3Ce24uQnmHJuHRTFkez6YffxhV4F8Lw",
                          "isVerified": true,
                          "isInitialized": true,
                          "__v": 0,
                          "adminId": "6467baf5ded10e62ca1493b3",
                        },
                      ],
                  }
        404:
          $ref: "#/components/responses/standard404"
        500:
          $ref: "#/components/responses/standard500"

  #Admin routes
  /admin/initialize/{poolId}:
    post:
      tags:
        - Admin
      summary: Request to initiates pool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                poolAddress:
                  type: string
                  example: "0x648e1275d31b63ce8dd99671"
      parameters:
        - name: poolId
          required: true
          in: path
          description: Provide the mongoose object id of required Pool.
          schema:
            type: string
            example: 648e1275d31b63ce8dd99671

      security:
        - adminBearerAuth: []

      responses:
        200:
          description: Query was successful
          content:
            application/json:
              schema:
                type: string
                example:
                  {
                    "success": true,
                    "messgae": "Pool has been intialized successfully",
                  }
        400:
          $ref: "#/components/responses/standard400"
        500:
          $ref: "#/components/responses/standard500"

components:
  securitySchemes:
    adminBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    userBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    superAdminBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    standard200:
      description: The request succeeded. Check response for more details.
    standard400:
      description: A parameter is missing. Check response for more details. You can also check request body schema for more information.
    standard404:
      description: Requested resource doesn't exists. Check response for more details.
    standard500:
      description: Internal Server Error. The server encountered something unexpected that prevented it from fulfilling the request.
